// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EcomSdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import ClickstreamAnalytics
import Combine
import CommonCrypto
import CoreLocation
import CryptoKit
import Darwin
import DeveloperToolsSupport
import Dispatch
@_exported import EcomSdk
import Foundation
import Security
import Swift
import SwiftUI
import UIKit.UIFont
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol NibLoadable : AnyObject {
  static var nibName: Swift.String { get }
}
extension EcomSdk.NibLoadable where Self : UIKit.UIView {
  public static var nibName: Swift.String {
    get
  }
  public static var nib: UIKit.UINib {
    get
  }
}
public typealias Action = (() -> Swift.Void)
public enum NetworkState : Swift.String, Swift.CaseIterable, Swift.Codable {
  case Mocker, Prom, Ift, Psi, Local
  public init?(rawValue: Swift.String)
  public typealias AllCases = [EcomSdk.NetworkState]
  public typealias RawValue = Swift.String
  public static var allCases: [EcomSdk.NetworkState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum SEnvironment : Swift.Int {
  case prod = 0
  case sandboxWithoutBankApp
  case sandboxRealBankApp
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class Ecom : ObjectiveC.NSObject {
  @objc public static func setup(uiPreferences: EcomSdk.EcomUIPreferences? = nil, environment: EcomSdk.SEnvironment = .prod, completion: ((EcomSdk.EcomError?) -> Swift.Void)? = nil)
  @objc public static func payWithBankInvoiceId(paymentRequest: EcomSdk.SBankInvoicePaymentRequest, completion: @escaping (_ state: EcomSdk.SPayState) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class EcomError : ObjectiveC.NSObject {
  @objc public var errorDescription: Swift.String
  @objc deinit
}
public typealias EncDataRequestCompletion = (EcomSdk.EncDataRequestParameters?) -> Swift.Void
@_hasMissingDesignatedInitializers @objc final public class EncDataRequestParameters : ObjectiveC.NSObject {
  final public var dictionary: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
infix operator =~ : DefaultPrecedence
@objc public enum PaymentSystem : Swift.Int {
  case mir = 0
  case visa
  case mc
  case all
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SBAxis {
  case horizontal
  case vertical
  case x
  case y
  public static func == (a: EcomSdk.SBAxis, b: EcomSdk.SBAxis) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @IBDesignable @_Concurrency.MainActor(unsafe) final public class SBPButton : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public var tapAction: EcomSdk.Action?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(SBankInvoiceIdPaymentRequest) final public class SBankInvoicePaymentRequest : ObjectiveC.NSObject {
  @objc public init(merchantLogin: Swift.String? = nil, bankInvoiceId: Swift.String, orderNumber: Swift.String, language: Swift.String? = nil, redirectUri: Swift.String, apiKey: Swift.String? = nil)
  @objc deinit
}
@objc public enum SPayState : Swift.Int {
  case success = 0
  case waiting
  case cancel
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SPayTokenState : Swift.Int {
  case success = 0
  case cancel
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SPaymentTokenResponseModel) final public class SPaymentTokenResponseModel : ObjectiveC.NSObject {
  @objc final public var paymentToken: Swift.String?
  @objc final public var paymentTokenId: Swift.String?
  @objc final public var tokenExpiration: Swift.Int
  @objc final public var error: Swift.String?
  @objc public init(paymentToken: Swift.String? = nil, paymentTokenId: Swift.String? = nil, tokenExpiration: Swift.Int = 0, error: Swift.String? = nil)
  @objc deinit
}
@objc public class EcomUIPreferences : ObjectiveC.NSObject {
  public init(background: EcomSdk.EcomUIBackgroundPreferences? = nil, button: EcomSdk.EcomUIButtonPreferences? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EcomUIBackgroundPreferences : EcomSdk.BaseUIPreferences {
  override public init(backgroundColor: UIKit.UIColor? = nil, backgroundColorSecondary: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, textColorSecondary: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil, fontSecondary: UIKit.UIFont? = nil, radius: Swift.Double? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EcomUIButtonPreferences : EcomSdk.BaseUIPreferences {
  override public init(backgroundColor: UIKit.UIColor? = nil, backgroundColorSecondary: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, textColorSecondary: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil, fontSecondary: UIKit.UIFont? = nil, radius: Swift.Double? = nil)
  @objc deinit
}
@objc public class BaseUIPreferences : ObjectiveC.NSObject {
  public init(backgroundColor: UIKit.UIColor?, backgroundColorSecondary: UIKit.UIColor?, textColor: UIKit.UIColor?, textColorSecondary: UIKit.UIColor?, font: UIKit.UIFont?, fontSecondary: UIKit.UIFont?, radius: Swift.Double?)
  @objc deinit
}
public protocol ReusableView : AnyObject {
}
extension EcomSdk.ReusableView where Self : UIKit.UIView {
  public static var reuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UITableViewCell : EcomSdk.ReusableView {
}
extension UIKit.UITableViewHeaderFooterView : EcomSdk.ReusableView {
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func register<T>(cellClass: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func register<T>(aClass: T.Type) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func dequeueResuableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableHeaderFooterView<T>() -> T where T : UIKit.UITableViewHeaderFooterView
}
extension EcomSdk.NetworkState : Swift.Equatable {}
extension EcomSdk.NetworkState : Swift.Hashable {}
extension EcomSdk.NetworkState : Swift.RawRepresentable {}
extension EcomSdk.SEnvironment : Swift.Equatable {}
extension EcomSdk.SEnvironment : Swift.Hashable {}
extension EcomSdk.SEnvironment : Swift.RawRepresentable {}
extension EcomSdk.PaymentSystem : Swift.Equatable {}
extension EcomSdk.PaymentSystem : Swift.Hashable {}
extension EcomSdk.PaymentSystem : Swift.RawRepresentable {}
extension EcomSdk.SBAxis : Swift.Equatable {}
extension EcomSdk.SBAxis : Swift.Hashable {}
extension EcomSdk.SPayState : Swift.Equatable {}
extension EcomSdk.SPayState : Swift.Hashable {}
extension EcomSdk.SPayState : Swift.RawRepresentable {}
extension EcomSdk.SPayTokenState : Swift.Equatable {}
extension EcomSdk.SPayTokenState : Swift.Hashable {}
extension EcomSdk.SPayTokenState : Swift.RawRepresentable {}
